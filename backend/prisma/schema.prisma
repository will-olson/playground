// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ==============================================
// CORE MODELS
// ==============================================

model User {
  id                String      @id @default(uuid())
  username          String      @unique
  email             String      @unique
  password_hash     String
  full_name         String?
  bio               String?
  title             String?
  organization      String?
  location          String?
  social_links      Json?
  profile_image_url String?
  is_admin          Boolean     @default(false)
  is_verified       Boolean     @default(false)
  is_active         Boolean     @default(true)
  last_login_at     DateTime?
  
  // Sigma Account Integration
  sigma_member_id   String?     @unique
  sigma_member_type String?     // creator, explorer, viewer, admin
  sigma_account_created_at DateTime?
  
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  // Relationships
  workbooks         Workbook[]  @relation("WorkbookOwner")
  authored_workbooks Workbook[] @relation("WorkbookAuthor")
  favorites         Favorite[]
  workbook_favorites WorkbookFavorite[]
  workbook_shares   WorkbookShare[]
  followers         UserFollow[]    @relation("Following")
  following         UserFollow[]    @relation("Followers")
  // Legacy Follow relations
  legacy_followers  Follow[]    @relation("Followers")
  legacy_following  Follow[]    @relation("Following")
  curated_features  FeaturedItem[]
  refresh_tokens    RefreshToken[]
  reports_made      Report[]    @relation("Reporter")
  reports_received  Report[]    @relation("ReportedUser")
  export_schedules  ExportSchedule[]
  activity_logs     ActivityLog[]
  challenge_participations ChallengeParticipation[]

  // Indexes
  @@index([username])
  @@index([email])
  @@index([created_at])
  @@index([is_active])
  @@map("users")
}

model Workbook {
  id                  String      @id @default(uuid())
  name                String
  title               String?     // Keep for backward compatibility
  description         String?
  sigma_embed_url     String?
  sigma_workbook_id   String?     // Sigma workbook ID for tracking
  thumbnail_url       String?
  is_public           Boolean     @default(true)
  is_publicly_visible Boolean     @default(true) // Keep for backward compatibility
  allow_copy          Boolean     @default(true)
  allow_comments      Boolean     @default(true)
  allow_sharing       Boolean     @default(true)
  view_count          Int         @default(0)
  favorite_count      Int         @default(0)
  is_featured         Boolean     @default(false)
  featured_at         DateTime?
  status              WorkbookStatus @default(DRAFT)
  published_at        DateTime?
  updated_at          DateTime    @updatedAt
  created_at          DateTime    @default(now())

  // Foreign Keys
  userId              String
  author_id           String      // Keep for backward compatibility
  templateId          String?

  // Relationships
  user                User        @relation("WorkbookOwner", fields: [userId], references: [id], onDelete: Cascade)
  author              User        @relation("WorkbookAuthor", fields: [author_id], references: [id], onDelete: Cascade)
  template            WorkbookTemplate? @relation(fields: [templateId], references: [id])
  tags                WorkbookTag[]
  favorited_by        Favorite[]
  reports             Report[]    @relation("ReportedWorkbook")
  views               WorkbookView[]
  favorites           WorkbookFavorite[]
  shares              WorkbookShare[]
  export_schedules    ExportSchedule[]
  activity_logs       ActivityLog[]

  // Indexes
  @@index([userId])
  @@index([author_id])
  @@index([published_at])
  @@index([is_public])
  @@index([is_publicly_visible])
  @@index([is_featured])
  @@index([view_count])
  @@index([favorite_count])
  @@index([status])
  @@map("workbooks")
}

model Tag {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  color       String? // Hex color
  is_active   Boolean @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relationships
  workbooks   WorkbookTag[]
  templates   TemplateTag[]

  // Indexes
  @@index([name])
  @@index([is_active])
  @@map("tags")
}

model WorkbookTag {
  workbook_id String
  tag_id      Int
  created_at  DateTime @default(now())

  // Relationships
  workbook    Workbook @relation(fields: [workbook_id], references: [id], onDelete: Cascade)
  tag         Tag      @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([workbook_id, tag_id])
  @@index([tag_id])
  @@map("workbook_tags")
}

// ==============================================
// SOCIAL MODELS
// ==============================================

model Favorite {
  user_id     String
  workbook_id String
  created_at  DateTime @default(now())

  // Relationships
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  workbook    Workbook @relation(fields: [workbook_id], references: [id], onDelete: Cascade)

  @@id([user_id, workbook_id])
  @@index([user_id])
  @@index([workbook_id])
  @@index([created_at])
  @@map("favorites")
}

model UserFollow {
  follower_id  String
  following_id String
  followed_at  DateTime @default(now())

  // Relationships
  follower     User     @relation("Followers", fields: [follower_id], references: [id], onDelete: Cascade)
  following    User     @relation("Following", fields: [following_id], references: [id], onDelete: Cascade)

  @@id([follower_id, following_id])
  @@index([follower_id])
  @@index([following_id])
  @@index([followed_at])
  @@map("user_follows")
}

// Keep old Follow model for backward compatibility
model Follow {
  follower_id  String
  following_id String
  created_at   DateTime @default(now())

  // Relationships
  follower     User     @relation("Followers", fields: [follower_id], references: [id], onDelete: Cascade)
  following    User     @relation("Following", fields: [following_id], references: [id], onDelete: Cascade)

  @@id([follower_id, following_id])
  @@index([follower_id])
  @@index([following_id])
  @@index([created_at])
  @@map("follows")
}

// ==============================================
// ADMIN & CURATION MODELS
// ==============================================

model FeaturedItem {
  id                  Int      @id @default(autoincrement())
  item_id             String
  item_type           ItemType
  feature_type        FeatureType
  featured_date       DateTime
  expires_at          DateTime?
  is_active           Boolean  @default(true)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Foreign Keys
  curated_by_admin_id String

  // Relationships
  curated_by          User     @relation(fields: [curated_by_admin_id], references: [id])

  // Indexes
  @@index([item_id])
  @@index([feature_type])
  @@index([featured_date])
  @@index([is_active])
  @@map("featured_items")
}

model Report {
  id            String      @id @default(uuid())
  report_type   ReportType
  reason        String
  description   String?
  status        ReportStatus @default(PENDING)
  admin_notes   String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  // Foreign Keys
  reporter_id   String
  reported_user_id String?
  reported_workbook_id String?

  // Relationships
  reporter      User        @relation("Reporter", fields: [reporter_id], references: [id])
  reported_user User?       @relation("ReportedUser", fields: [reported_user_id], references: [id])
  reported_workbook Workbook? @relation("ReportedWorkbook", fields: [reported_workbook_id], references: [id])

  // Indexes
  @@index([report_type])
  @@index([status])
  @@index([created_at])
  @@map("reports")
}

// ==============================================
// AUTHENTICATION MODELS
// ==============================================

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expires_at DateTime
  is_revoked Boolean  @default(false)
  created_at DateTime @default(now())

  // Foreign Keys
  user_id   String

  // Relationships
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Indexes
  @@index([user_id])
  @@index([expires_at])
  @@index([is_revoked])
  @@map("refresh_tokens")
}

// ==============================================
// ANALYTICS MODELS
// ==============================================

model WorkbookView {
  id          String   @id @default(uuid())
  workbook_id String
  user_id     String?  // Null for anonymous views
  ip_address  String?  // IPv6 compatible
  user_agent  String?
  referrer    String?
  created_at  DateTime @default(now())

  // Relationships
  workbook    Workbook @relation(fields: [workbook_id], references: [id], onDelete: Cascade)

  // Indexes
  @@index([workbook_id])
  @@index([user_id])
  @@index([created_at])
  @@map("workbook_views")
}

// ==============================================
// ENUMS
// ==============================================

enum ItemType {
  workbook
  user
}

enum FeatureType {
  viz_of_the_day
  featured_author
  highlight
  trending
}

enum ReportType {
  SPAM
  INAPPROPRIATE_CONTENT
  HARASSMENT
  COPYRIGHT_VIOLATION
  FAKE_ACCOUNT
  OTHER
}

enum ReportStatus {
  PENDING
  IN_REVIEW
  RESOLVED
  DISMISSED
}

// ==============================================
// NEW ENHANCED MODELS
// ==============================================

model WorkbookTemplate {
  id            String   @id @default(uuid())
  name          String
  description   String?
  category      String
  thumbnail     String?
  isPopular     Boolean  @default(false)
  isPublic      Boolean  @default(true)
  estimatedTime String?
  difficulty    String?  // beginner, intermediate, advanced
  usageCount    Int      @default(0)
  createdBy     String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relationships
  workbooks     Workbook[]
  tags          TemplateTag[]

  @@index([category])
  @@index([isPopular])
  @@index([usageCount])
  @@map("workbook_templates")
}

model TemplateTag {
  templateId String
  tagId      Int
  created_at DateTime @default(now())

  // Relationships
  template   WorkbookTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  tag        Tag              @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([templateId, tagId])
  @@index([tagId])
  @@map("template_tags")
}

model WorkbookFavorite {
  id          String   @id @default(uuid())
  workbookId  String
  userId      String
  favoritedAt DateTime @default(now())

  // Relationships
  workbook    Workbook @relation(fields: [workbookId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workbookId, userId])
  @@index([workbookId])
  @@index([userId])
  @@index([favoritedAt])
  @@map("workbook_favorites")
}

model WorkbookShare {
  id         String   @id @default(uuid())
  workbookId String
  userId     String
  platform   String   // social media platform or sharing method
  sharedAt   DateTime @default(now())

  // Relationships
  workbook   Workbook @relation(fields: [workbookId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([workbookId])
  @@index([userId])
  @@index([sharedAt])
  @@map("workbook_shares")
}

model ExportSchedule {
  id            String   @id @default(uuid())
  name          String
  frequency     String   // daily, weekly, monthly
  format        String   // pdf, excel, csv
  workbookId    String
  userId        String
  cronExpression String?
  status        String   @default("active") // active, paused, completed
  lastRun       DateTime?
  nextRun       DateTime?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relationships
  workbook      Workbook @relation(fields: [workbookId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workbookId])
  @@index([status])
  @@index([nextRun])
  @@map("export_schedules")
}

model ActivityLog {
  id            String   @id @default(uuid())
  userId        String
  type          String   // view, favorite, share, follow, workbook_created, etc.
  workbookId    String?
  targetUserId  String?
  challengeId   String?
  metadata      Json?
  created_at    DateTime @default(now())

  // Relationships
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workbook      Workbook? @relation(fields: [workbookId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([workbookId])
  @@index([created_at])
  @@map("activity_logs")
}

model CommunityChallenge {
  id          String   @id @default(uuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  prize       String?
  status      String   @default("upcoming") // upcoming, active, completed
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relationships
  participants ChallengeParticipation[]

  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@map("community_challenges")
}

model ChallengeParticipation {
  id          String   @id @default(uuid())
  userId      String
  challengeId String
  joinedAt    DateTime @default(now())
  status      String   @default("active") // active, completed, withdrawn

  // Relationships
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   CommunityChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
  @@index([joinedAt])
  @@map("challenge_participations")
}

enum WorkbookStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}